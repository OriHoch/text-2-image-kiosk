- name: install packages
  become: yes
  become_user: root
  ansible.builtin.apt:
    name:
    - python3-pip
    - python-is-python3
    - python3.10-venv
    update_cache: yes
- name: install cuda
  become: yes
  become_user: root
  ansible.builtin.shell: |
    apt-get install -y linux-headers-$(uname -r) &&\
    distribution=$(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g') &&\
    wget https://developer.download.nvidia.com/compute/cuda/repos/$distribution/x86_64/cuda-keyring_1.0-1_all.deb &&\
    dpkg -i cuda-keyring_1.0-1_all.deb &&\
    apt-get update &&\
    apt-get -y install cuda-drivers
- name: clone stable diffusion
  ansible.builtin.git:
    repo: https://github.com/OriHoch/stable-diffusion.git
    dest: /home/ubuntu/stable-diffusion
    version: add-api
    depth: 1
- name: create stable diffusion venv
  ansible.builtin.command:
    cmd: "python3 -m venv /home/ubuntu/stable-diffusion/venv"
    creates: /home/ubuntu/stable-diffusion/venv
- name: install diffusion requirements
  ansible.builtin.pip:
    requirements: requirements.txt
    virtualenv: venv
    chdir: /home/ubuntu/stable-diffusion
- name: copy stable diffusion model
  ansible.builtin.copy:
    src: "{{ sd_ckpt_file }}"
    dest: /home/ubuntu/stable-diffusion/sd-v1-4.ckpt
- name: copy sd_api.sh
  ansible.builtin.copy:
    src: sd_api.sh
    dest: /home/ubuntu/sd_api.sh
    mode: 0755
- name: copy sd_api config file
  ansible.builtin.copy:
      src: "{{ sd_api_config_json_file }}"
      dest: /home/ubuntu/sd-api-config.json
      mode: 0600
- name: create sd_api systemd service
  become: yes
  become_user: root
  ansible.builtin.copy:
    src: sd_api.service
    dest: /etc/systemd/system/sd_api.service
- name: enable and start sd_api systemd service
  become: yes
  become_user: root
  ansible.builtin.systemd:
    name: sd_api
    enabled: yes
    state: restarted
- name: install nginx
  become: yes
  become_user: root
  ansible.builtin.apt:
    name: nginx
    update_cache: yes
- name: copy nginx site config
  become: yes
  become_user: root
  ansible.builtin.copy:
      src: nginx_site.conf
      dest: /etc/nginx/sites-enabled/default
- name: enable and restart nginx
  become: yes
  become_user: root
  ansible.builtin.service:
    name: nginx
    state: restarted
    enabled: yes
- name: mount instance volume disk
  become: yes
  become_user: root
  ansible.builtin.shell:
    cmd: |
      mkfs.xfs -f /dev/nvme1n1 &&\
      mkdir -p /var/www/sd &&\
      echo "$(blkid -o export /dev/nvme1n1 | grep ^UUID=) /var/www/sd xfs defaults,noatime" | tee -a /etc/fstab &&\
      mount -a &&\
      touch /var/www/sd/created
    creates: /var/www/sd/created
- name: create sd output directory
  become: yes
  become_user: root
  ansible.builtin.shell:
    cmd: |
      mkdir -p /var/www/sd/output &&\
      chown -R ubuntu:ubuntu /var/www/sd/output &&\
      chmod -R 0777 /var/www/sd/output
    creates: /var/www/sd/output
# this is needed for support on g5 aws instance
- name: upgrade torch for latest cuda
  ansible.builtin.shell:
    cmd: |
      cd /home/ubuntu/stable-diffusion &&\
      venv/bin/pip3 install --upgrade torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu116 &&\
      touch upgraded_torch.done
    creates: /home/ubuntu/stable-diffusion/upgraded_torch.done
